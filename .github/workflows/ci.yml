name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          server/package-lock.json
          client/package-lock.json
    
    - name: Install server dependencies
      run: |
        cd server
        npm ci
    
    - name: Install client dependencies
      run: |
        cd client
        npm ci
    
    - name: Run server tests
      run: |
        cd server
        npm test
      env:
        NODE_ENV: test
    
    - name: Run client tests
      run: |
        cd client
        npm test -- --coverage --watchAll=false
    
    - name: Run server linting
      run: |
        cd server
        npm run lint || true
    
    - name: Run client linting
      run: |
        cd client
        npm run lint || true
    
    - name: Build client
      run: |
        cd client
        npm run build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./client/coverage

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run security audit (server)
      run: |
        cd server
        npm audit --audit-level high
    
    - name: Run security audit (client)
      run: |
        cd client
        npm audit --audit-level high

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push server image
      uses: docker/build-push-action@v4
      with:
        context: ./server
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/climatelens-server:latest
          ${{ secrets.DOCKER_USERNAME }}/climatelens-server:${{ github.sha }}
    
    - name: Build and push client image
      uses: docker/build-push-action@v4
      with:
        context: ./client
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/climatelens-client:latest
          ${{ secrets.DOCKER_USERNAME }}/climatelens-client:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deployment step would go here"
        # Add your deployment logic here
        # e.g., deploy to AWS, Heroku, etc.
